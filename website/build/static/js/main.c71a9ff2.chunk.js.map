{"version":3,"sources":["UserView.js","App.js","serviceWorker.js","index.js"],"names":["UserView","props","user","dataPoints","data_points","hasInsta","insta","length","hasFollowerData","react_default","a","createElement","className","src","image_url","name","href","num_followers","ResponsiveContainer","width","height","LineChart","data","margin","top","right","bottom","left","Line","type","dataKey","stroke","YAxis","domain","orientation","axisLine","tickLine","hide","XAxis","padding","Tooltip","App","_this","this","setState","users","axios","get","then","res","state","map","i","src_UserView","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oUAoEeA,MAjEf,SAAkBC,GACd,IAAMC,EAAOD,EAAMC,KACbC,EAAaD,EAAKE,YAElBC,EAAWH,EAAKI,OAASJ,EAAKI,MAAMC,OAAS,EAC7CC,EAAkBL,GAAcA,EAAWI,OAAS,EAE1D,OACIE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKX,EAAKY,aAEnBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,SACKT,EAAKa,MAETV,GACGI,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eACTH,EAAAC,EAAAC,cAAA,KAAGK,KAAM,6BAA+Bd,EAAKI,MAAQ,KAChD,IAAMJ,EAAKI,UAM/BE,GACGC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,YAAOR,EAAWA,EAAWI,OAAS,GAAGU,gBAGhDT,GACGC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQ,KACtCX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACIC,KAAMnB,EACNoB,OAAQ,CAAEC,IAAK,EAAGC,MAAO,EAAGC,OAAQ,EAAGC,KAAM,IAE7ClB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,KAAK,WAAWC,QAAQ,gBAAgBC,OAAO,YACrDtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CACIH,KAAK,SACLI,OAAQ,CAAC,UAAW,WACpBC,YAAY,QAEZC,UAAU,EACVC,UAAU,EACVC,MAAM,IAEV5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CACIR,QAAQ,YACRS,QAAS,CAACd,MAAO,IACjBU,UAAU,EACVC,UAAU,EACVC,MAAM,IAEV5B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,6BCpBbC,sMA/BO,IAAAC,EAAAC,KAClBA,KAAKC,SAAS,CAAEC,MAAS,KACzBC,IAAMC,IAAN,0CACGC,KAAK,SAAAC,GACJP,EAAKE,SAAS,CAAEC,MAASI,EAAI3B,0CAMjC,IAAIuB,EAAQ,GAKZ,OAJIF,KAAKO,QACPL,EAAQF,KAAKO,MAAML,OAInBpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZiC,EAAMM,IAAI,SAASjD,EAAMkD,GACxB,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,CACLnD,KAAMA,EACNoD,IAAKF,eAxBDG,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.c71a9ff2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { LineChart, Line, Tooltip, YAxis, XAxis, ResponsiveContainer } from 'recharts';\n\nfunction UserView(props) {\n    const user = props.user;\n    const dataPoints = user.data_points;\n\n    const hasInsta = user.insta && user.insta.length > 0;\n    const hasFollowerData = dataPoints && dataPoints.length > 0;\n\n    return (\n        <div className=\"user-view\">\n            <div className=\"user-info\">\n                <div className=\"user-image\">\n                    <img src={user.image_url}/>\n                </div>\n                <div className=\"user-name\">\n                    <p>\n                        {user.name}\n                    </p>\n                    {hasInsta && \n                        <p className=\"user-handle\">\n                            <a href={\"https://www.instagram.com/\" + user.insta + \"/\"}>\n                                {\"@\" + user.insta}\n                            </a>\n                        </p>\n                    }\n                </div>\n            </div>\n            {hasFollowerData && \n                <div className=\"follower-count\">\n                    <span>Followers: </span>\n                    <span>{dataPoints[dataPoints.length - 1].num_followers}</span>\n                </div>\n            }\n            {hasFollowerData &&\n                <div className=\"chart-view\">\n                    <ResponsiveContainer width='100%' height={250}>\n                        <LineChart \n                            data={dataPoints}\n                            margin={{ top: 5, right: 5, bottom: 5, left: 5 }}\n                        >\n                            <Line type=\"monotone\" dataKey=\"num_followers\" stroke=\"#8884d8\" />\n                            <YAxis \n                                type=\"number\" \n                                domain={['dataMin', 'dataMax']} \n                                orientation=\"right\" \n                                // padding={{ top: , bottom: 20, left: 20 }}\n                                axisLine={false}\n                                tickLine={false}\n                                hide={true}\n                            />\n                            <XAxis \n                                dataKey=\"timestamp\" \n                                padding={{right: 30}}\n                                axisLine={false}\n                                tickLine={false}\n                                hide={true}\n                            />\n                            <Tooltip />\n                        </LineChart>\n                    </ResponsiveContainer>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default UserView;","import React, { Component } from 'react';\nimport UserView from './UserView.js';\nimport axios from 'axios';\n\nimport './App.css';\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.setState({ 'users': [] });\n    axios.get(`http://www.thebachelorgram.com/update/`)\n      .then(res => {\n        this.setState({ \"users\": res.data });\n      });\n  }\n\n  render() {\n\n    var users = []\n    if (this.state) {\n      users = this.state.users;\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Bachelor Insta Followers</h1>\n        <div className=\"user-container\">\n          {users.map(function(user, i){\n            return <UserView \n              user={user}\n              key={i}\n            />\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}